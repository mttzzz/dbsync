name: CI/CD

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  schedule:
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 02:00 UTC
    - cron: '0 2 * * 0'

env:
  GO_VERSION: '1.24.1'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run vet
      run: go vet ./...

    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run staticcheck
      run: staticcheck ./...

    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./internal/config ./internal/models ./internal/version ./pkg/utils ./internal/services ./internal/cli ./internal/ui

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done

    - name: Create test database and user
      run: |
        mysql -h127.0.0.1 -P3306 -uroot -proot -e "CREATE DATABASE IF NOT EXISTS dbsync_test;"
        mysql -h127.0.0.1 -P3306 -uroot -proot -e "CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';"
        mysql -h127.0.0.1 -P3306 -uroot -proot -e "GRANT ALL PRIVILEGES ON dbsync_test.* TO 'test_user'@'%';"
        mysql -h127.0.0.1 -P3306 -uroot -proot -e "FLUSH PRIVILEGES;"

    - name: Run integration tests
      env:
        DBSYNC_TEST_REMOTE_HOST: 127.0.0.1
        DBSYNC_TEST_REMOTE_PORT: 3306
        DBSYNC_TEST_REMOTE_USER: test_user
        DBSYNC_TEST_REMOTE_PASSWORD: test_password
        DBSYNC_TEST_LOCAL_HOST: 127.0.0.1
        DBSYNC_TEST_LOCAL_PORT: 3306
        DBSYNC_TEST_LOCAL_USER: test_user
        DBSYNC_TEST_LOCAL_PASSWORD: test_password
      run: go test -v -tags=integration ./test/integration

  build:
    needs: test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            platform: linux/amd64
          - goos: linux
            goarch: arm64
            platform: linux/arm64
          - goos: linux
            goarch: 386
            platform: linux/386
          # Windows
          - goos: windows
            goarch: amd64
            platform: windows/amd64
          - goos: windows
            goarch: 386
            platform: windows/386
          # macOS
          - goos: darwin
            goarch: amd64
            platform: darwin/amd64
          - goos: darwin
            goarch: arm64
            platform: darwin/arm64

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate version info
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          VERSION="v0.0.0-main-$(git rev-parse --short HEAD)"
        else
          VERSION="v0.0.0-${GITHUB_REF#refs/heads/}-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        echo "git_commit=${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        EXT=""
        if [ "${{ matrix.goos }}" = "windows" ]; then
          EXT=".exe"
        fi
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        mkdir -p dist
        
        # –ò–º—è —Ñ–∞–π–ª–∞
        FILENAME="dbsync-${{ steps.version.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}${EXT}"
        
        # –°–æ–±–∏—Ä–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª —Å –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        go build \
          -ldflags="-s -w -X 'db-sync-cli/internal/version.Version=${{ steps.version.outputs.version }}' \
                    -X 'db-sync-cli/internal/version.BuildDate=${{ steps.version.outputs.build_date }}' \
                    -X 'db-sync-cli/internal/version.GitCommit=${{ steps.version.outputs.git_commit }}'" \
          -o "dist/${FILENAME}" \
          ./cmd/dbsync
        
        # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${FILENAME%.exe}.zip" "$FILENAME"
        else
          tar -czf "${FILENAME}.tar.gz" "$FILENAME"
        fi
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ
        echo "Built: $FILENAME"
        ls -la

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dbsync-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 30

  # –†–µ–ª–∏–∑ –¥–ª—è —Ç–µ–≥–æ–≤ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–ª–∏–∑—ã)
  release-tag:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts/ -type f \( -name "*.zip" -o -name "*.tar.gz" \) | while read file; do
          filename=$(basename "$file")
          cp "$file" "release/$filename"
        done
        
        # –°–æ–∑–¥–∞—ë–º checksums
        cd release
        sha256sum * > checksums.txt
        
        echo "Release files:"
        ls -la

    - name: Extract release notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å release notes –∏–∑ CHANGELOG –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if [ -f CHANGELOG.md ]; then
          awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.txt
        fi
        
        if [ ! -s release_notes.txt ]; then
          echo "üöÄ –†–µ–ª–∏–∑ $VERSION" > release_notes.txt
          echo "" >> release_notes.txt
          echo "### üì¶ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:" >> release_notes.txt
          echo "- –£–ª—É—á—à–µ–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "### üíæ –°–∫–∞—á–∞—Ç—å:" >> release_notes.txt
          echo "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∏–∂–µ." >> release_notes.txt
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body_path: release_notes.txt
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ –¥–ª—è main –≤–µ—Ç–∫–∏ (nightly builds)
  release-nightly:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare nightly release
      run: |
        mkdir -p release
        find artifacts/ -type f \( -name "*.zip" -o -name "*.tar.gz" \) | while read file; do
          filename=$(basename "$file")
          cp "$file" "release/$filename"
        done
        
        cd release
        sha256sum * > checksums.txt
        
        echo "Nightly build files:"
        ls -la

    - name: Delete existing nightly release
      continue-on-error: true
      run: |
        gh release delete nightly --yes || true
        git push origin --delete nightly || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create nightly tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -f nightly
        git push origin nightly --force

    - name: Create Nightly Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly
        name: "üåô Nightly Build"
        files: release/*
        body: |
          üåô **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –∏–∑ main –≤–µ—Ç–∫–∏**
          
          ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**: –≠—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
          
          üìÖ **–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          üîó **–ö–æ–º–º–∏—Ç**: ${{ github.sha }}
          
          ### üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:
          - **Linux**: x86_64, ARM64, i386
          - **Windows**: x86_64, i386  
          - **macOS**: Intel (x86_64), Apple Silicon (ARM64)
          
          ### üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞:
          1. –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ –¥–ª—è –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
          2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤
          3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É PATH
          
          üíæ **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏**: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `checksums.txt` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SHA256
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ –¥–ª—è develop –≤–µ—Ç–∫–∏
  release-weekly:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'schedule'
    needs: [test, build] 
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare weekly release
      run: |
        mkdir -p release
        find artifacts/ -type f \( -name "*.zip" -o -name "*.tar.gz" \) | while read file; do
          filename=$(basename "$file")
          cp "$file" "release/$filename"
        done
        
        cd release
        sha256sum * > checksums.txt

    - name: Delete existing weekly release  
      continue-on-error: true
      run: |
        gh release delete weekly --yes || true
        git push origin --delete weekly || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create weekly tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        WEEK=$(date +%Y-W%V)
        git tag -f weekly
        git push origin weekly --force

    - name: Create Weekly Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: weekly
        name: "üìÖ Weekly Development Build"
        files: release/*
        body: |
          üìÖ **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏–∑ develop –≤–µ—Ç–∫–∏**
          
          üöß **–°—Ç–∞—Ç—É—Å**: –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
          
          üìÖ **–ù–µ–¥–µ–ª—è**: $(date +%Y-W%V)
          üîó **–ö–æ–º–º–∏—Ç**: ${{ github.sha }}
          
          ### üß™ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:
          –≠—Ç–∞ —Å–±–æ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ develop –≤–µ—Ç–∫–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è:
          - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
          - –†–∞–Ω–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ª—É—á—à–µ–Ω–∏—è–º
          - –û–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
          
          ‚ö†Ô∏è **–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–ª–∏–∑–∞—Ö
  notify:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [release-tag]
    runs-on: ubuntu-latest
    
    steps:
    - name: Extract version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create summary
      run: |
        echo "# üöÄ –†–µ–ª–∏–∑ ${{ steps.version.outputs.version }} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ—Ä–∫–∏:" >> $GITHUB_STEP_SUMMARY
        echo "- **Linux**: x86_64, ARM64, i386" >> $GITHUB_STEP_SUMMARY
        echo "- **Windows**: x86_64, i386" >> $GITHUB_STEP_SUMMARY  
        echo "- **macOS**: Intel (x86_64), Apple Silicon (ARM64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîó –°—Å—ã–ª–∫–∏:" >> $GITHUB_STEP_SUMMARY
        echo "- [üìã Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [üì¶ –í—Å–µ —Ä–µ–ª–∏–∑—ã](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
