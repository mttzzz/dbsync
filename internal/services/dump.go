package services

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"db-sync-cli/internal/config"
	"db-sync-cli/internal/models"
)

// DumpService –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–º–ø–æ–≤
type DumpService struct {
	config    *config.Config
	dbService DatabaseServiceInterface
}

// NewDumpService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DumpService
func NewDumpService(cfg *config.Config, dbService DatabaseServiceInterface) *DumpService {
	return &DumpService{
		config:    cfg,
		dbService: dbService,
	}
}

// ValidateDumpOperation –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–∞–º–ø–∞
func (ds *DumpService) ValidateDumpOperation(databaseName string) error {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	if err := ds.dbService.ValidateDatabaseName(databaseName); err != nil {
		return fmt.Errorf("invalid database name: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–∞—è –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	exists, err := ds.dbService.DatabaseExists(databaseName, true)
	if err != nil {
		return fmt.Errorf("failed to check remote database: %w", err)
	}
	if !exists {
		return fmt.Errorf("database '%s' not found on remote server", databaseName)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
	remoteConn, err := ds.dbService.TestConnection(true)
	if err != nil || !remoteConn.Connected {
		return fmt.Errorf("cannot connect to remote server: %s", remoteConn.Error)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
	localConn, err := ds.dbService.TestConnection(false)
	if err != nil || !localConn.Connected {
		return fmt.Errorf("cannot connect to local server: %s", localConn.Error)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ mysqldump –¥–æ—Å—Ç—É–ø–µ–Ω
	if err := ds.validateMysqldumpAvailable(); err != nil {
		return fmt.Errorf("mysqldump validation failed: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ mysql –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
	if err := ds.validateMysqlAvailable(); err != nil {
		return fmt.Errorf("mysql client validation failed: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
	if err := ds.validateTempDirectory(); err != nil {
		return fmt.Errorf("temp directory validation failed: %w", err)
	}

	return nil
}

// PlanDumpOperation –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞–Ω –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
func (ds *DumpService) PlanDumpOperation(databaseName string) (*models.SyncResult, error) {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
	if err := ds.ValidateDumpOperation(databaseName); err != nil {
		return nil, err
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
	dbInfo, err := ds.dbService.GetDatabaseInfo(databaseName, true)
	if err != nil {
		return nil, fmt.Errorf("failed to get database info: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î
	localExists, err := ds.dbService.DatabaseExists(databaseName, false)
	if err != nil {
		return nil, fmt.Errorf("failed to check local database: %w", err)
	}

	result := &models.SyncResult{
		Success:      true, // –í dry-run —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–æ –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞
		DatabaseName: databaseName,
		DumpSize:     dbInfo.Size,
		TablesCount:  dbInfo.Tables,
		StartTime:    time.Now(),
		EndTime:      time.Now(),
		Duration:     0, // –î–ª—è dry-run
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
	action := "create"
	if localExists {
		action = "replace"
	}

	result.Error = fmt.Sprintf("DRY RUN: Would %s local database '%s' with %d tables (%.1f MB)",
		action, databaseName, dbInfo.Tables, float64(dbInfo.Size)/(1024*1024))

	return result, nil
}

// CreateDump —Å–æ–∑–¥–∞–µ—Ç –¥–∞–º–ø —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (ds *DumpService) CreateDump(databaseName string, dryRun bool) (*models.SyncResult, string, error) {
	startTime := time.Now()

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü
	dbInfo, err := ds.dbService.GetDatabaseInfo(databaseName, true) // true –¥–ª—è remote
	if err != nil {
		return nil, "", fmt.Errorf("failed to get database info: %w", err)
	}

	if dryRun {
		result, err := ds.PlanDumpOperation(databaseName)
		return result, "", err
	}

	// –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–∞–º–ø–∞
	tempDir := ds.config.Dump.TempDir
	if tempDir == "" {
		tempDir = "./tmp"
	}

	// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(tempDir, 0755); err != nil {
		return nil, "", fmt.Errorf("failed to create temp directory: %w", err)
	}

	dumpPath := filepath.Join(tempDir, fmt.Sprintf("%s_%d.sql", databaseName, time.Now().Unix()))

	// –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É mysqldump —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
	cmd := exec.Command(
		ds.config.Dump.MysqldumpPath,
		"--single-transaction",
		"--routines",
		"--triggers",
		"--no-tablespaces",
		"--set-gtid-purged=OFF", // –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å GTID
		"--opt",                 // –í–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
		"--quick",               // –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ –æ–¥–Ω–æ–π (—ç–∫–æ–Ω–æ–º–∏—Ç –ø–∞–º—è—Ç—å)
		"--compress",            // –°–∂–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		"--disable-keys",        // –û—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª—é—á–∏ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ (—É—Å–∫–æ—Ä—è–µ—Ç)
		"--extended-insert",     // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ INSERT (–±—ã—Å—Ç—Ä–µ–µ)
		"--host="+ds.config.Remote.Host,
		"--port="+fmt.Sprintf("%d", ds.config.Remote.Port),
		"--user="+ds.config.Remote.User,
		"--password="+ds.config.Remote.Password,
		databaseName,
	)

	// –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –¥–∞–º–ø–∞
	file, err := os.Create(dumpPath)
	if err != nil {
		return nil, "", fmt.Errorf("failed to create dump file: %w", err)
	}
	defer file.Close()

	cmd.Stdout = file

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ–Ω–µ
	if err := cmd.Start(); err != nil {
		os.Remove(dumpPath)
		return nil, "", fmt.Errorf("failed to start mysqldump: %w", err)
	}

	// –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
	done := make(chan error)
	go func() {
		done <- cmd.Wait()
	}()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500ms
	ticker := time.NewTicker(500 * time.Millisecond)
	defer ticker.Stop()

	fmt.Printf("üì¶ Dumping database '%s' (estimated %s)...\n", databaseName, FormatSize(dbInfo.Size))

	for {
		select {
		case err := <-done:
			// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
			if err != nil {
				os.Remove(dumpPath)
				return nil, "", fmt.Errorf("mysqldump failed: %w", err)
			}

			// –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
			fmt.Printf("\r‚úÖ Dump completed                                        \n")

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
			fileInfo, err := file.Stat()
			if err != nil {
				return nil, "", fmt.Errorf("failed to get dump file info: %w", err)
			}

			endTime := time.Now()

			result := &models.SyncResult{
				Success:      true,
				DatabaseName: databaseName,
				Duration:     endTime.Sub(startTime),
				DumpSize:     fileInfo.Size(),
				TablesCount:  dbInfo.Tables, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
				StartTime:    startTime,
				EndTime:      endTime,
			}

			return result, dumpPath, nil

		case <-ticker.C:
			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
			if stat, err := os.Stat(dumpPath); err == nil {
				progress := float64(stat.Size()) / float64(dbInfo.Size)
				if progress > 1.0 {
					progress = 1.0
				}

				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Ä–∞–∑–º–µ—Ä–æ–º —Ñ–∞–π–ª–∞
				fmt.Printf("\rüì¶ Dumping... %s / %s (%.1f%%)     ",
					FormatSize(stat.Size()),
					FormatSize(dbInfo.Size),
					progress*100)
			}
		}
	}
}

// RestoreDump –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–º–ø –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
func (ds *DumpService) RestoreDump(dumpPath string, databaseName string, dryRun bool) error {
	if dryRun {
		// –í dry-run —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
		if _, err := os.Stat(dumpPath); os.IsNotExist(err) {
			return fmt.Errorf("dump file does not exist: %s", dumpPath)
		}
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–∞–º–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(dumpPath); os.IsNotExist(err) {
		return fmt.Errorf("dump file does not exist: %s", dumpPath)
	}

	// –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
	dropCmd := exec.Command(
		ds.config.Dump.MysqlPath,
		"--host="+ds.config.Local.Host,
		"--port="+fmt.Sprintf("%d", ds.config.Local.Port),
		"--user="+ds.config.Local.User,
		"--password="+ds.config.Local.Password,
		"-e", fmt.Sprintf("DROP DATABASE IF EXISTS %s", databaseName),
	)

	if err := dropCmd.Run(); err != nil {
		return fmt.Errorf("failed to drop existing database: %w", err)
	}

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ë–î
	createCmd := exec.Command(
		ds.config.Dump.MysqlPath,
		"--host="+ds.config.Local.Host,
		"--port="+fmt.Sprintf("%d", ds.config.Local.Port),
		"--user="+ds.config.Local.User,
		"--password="+ds.config.Local.Password,
		"-e", fmt.Sprintf("CREATE DATABASE %s", databaseName),
	)

	if err := createCmd.Run(); err != nil {
		return fmt.Errorf("failed to create database: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–∞–º–ø–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	dumpInfo, err := os.Stat(dumpPath)
	if err != nil {
		return fmt.Errorf("failed to get dump file info: %w", err)
	}

	// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–º–ø —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
	restoreCmd := exec.Command(
		ds.config.Dump.MysqlPath,
		"--host="+ds.config.Local.Host,
		"--port="+fmt.Sprintf("%d", ds.config.Local.Port),
		"--user="+ds.config.Local.User,
		"--password="+ds.config.Local.Password,
		"--compress",               // –°–∂–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		"--quick",                  // –≠–∫–æ–Ω–æ–º–∏—Ç –ø–∞–º—è—Ç—å
		"--max_allowed_packet=1GB", // –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
		databaseName,
	)

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–∞–º–ø–∞
	file, err := os.Open(dumpPath)
	if err != nil {
		return fmt.Errorf("failed to open dump file: %w", err)
	}
	defer file.Close()

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º stderr –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
	var stderr strings.Builder
	restoreCmd.Stdin = file
	restoreCmd.Stderr = &stderr

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ–Ω–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	if err := restoreCmd.Start(); err != nil {
		return fmt.Errorf("failed to start mysql restore: %w", err)
	}

	// –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
	done := make(chan error)
	go func() {
		done <- restoreCmd.Wait()
	}()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500ms
	ticker := time.NewTicker(500 * time.Millisecond)
	defer ticker.Stop()

	fmt.Printf("üîÑ Restoring dump to local database '%s' (%s)...\n", databaseName, FormatSize(dumpInfo.Size()))

	startTime := time.Now()

	for {
		select {
		case err := <-done:
			// –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
			if err != nil {
				errMsg := "mysql restore failed"
				if stderrOutput := stderr.String(); stderrOutput != "" {
					errMsg += ": " + strings.TrimSpace(stderrOutput)
				}
				return fmt.Errorf("%s: %w", errMsg, err)
			}

			// –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
			fmt.Printf("\r‚úÖ Restore completed                                        \n")
			return nil

		case <-ticker.C:
			// –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
			elapsed := time.Since(startTime)
			if elapsed.Seconds() > 0 {
				// –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: 10-50 MB/min –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –ë–î
				estimatedSpeed := int64(20 * 1024 * 1024 / 60) // 20MB/min –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
				estimatedRead := int64(elapsed.Seconds()) * estimatedSpeed

				if estimatedRead > dumpInfo.Size() {
					estimatedRead = dumpInfo.Size()
				}

				progress := float64(estimatedRead) / float64(dumpInfo.Size()) * 100

				fmt.Printf("\rüîÑ Restoring... %s / %s (%.1f%%)     ",
					FormatSize(estimatedRead),
					FormatSize(dumpInfo.Size()),
					progress)
			}
		}
	}
}

// ExecuteSync –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (ds *DumpService) ExecuteSync(databaseName string) (*models.SyncResult, error) {
	startTime := time.Now()

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
	if err := ds.ValidateDumpOperation(databaseName); err != nil {
		return nil, fmt.Errorf("validation failed: %w", err)
	}

	// –°–æ–∑–¥–∞—ë–º –¥–∞–º–ø
	fmt.Printf("üì¶ Creating dump of remote database '%s'...\n", databaseName)
	dumpStartTime := time.Now()
	dumpResult, dumpPath, err := ds.CreateDump(databaseName, false)
	if err != nil {
		return nil, fmt.Errorf("dump creation failed: %w", err)
	}
	dumpDuration := time.Since(dumpStartTime)

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–º–ø
	fmt.Printf("üîÑ Restoring dump to local database '%s'...\n", databaseName)
	restoreStartTime := time.Now()
	if err := ds.RestoreDump(dumpPath, databaseName, false); err != nil {
		// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–∞–º–ø–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
		os.Remove(dumpPath)
		return nil, fmt.Errorf("dump restoration failed: %w", err)
	}
	restoreDuration := time.Since(restoreStartTime)

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	if err := os.Remove(dumpPath); err != nil {
		fmt.Printf("‚ö†Ô∏è  Warning: failed to cleanup dump file: %v\n", err)
	}

	endTime := time.Now()

	return &models.SyncResult{
		Success:         true,
		DatabaseName:    databaseName,
		Duration:        endTime.Sub(startTime),
		DumpDuration:    dumpDuration,
		RestoreDuration: restoreDuration,
		DumpSize:        dumpResult.DumpSize,
		TablesCount:     dumpResult.TablesCount,
		StartTime:       startTime,
		EndTime:         endTime,
	}, nil
}

// validateMysqldumpAvailable –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å mysqldump
func (ds *DumpService) validateMysqldumpAvailable() error {
	cmd := exec.Command(ds.config.Dump.MysqldumpPath, "--version")
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("mysqldump not found at '%s': %w", ds.config.Dump.MysqldumpPath, err)
	}
	return nil
}

// validateMysqlAvailable –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å mysql –∫–ª–∏–µ–Ω—Ç–∞
func (ds *DumpService) validateMysqlAvailable() error {
	cmd := exec.Command(ds.config.Dump.MysqlPath, "--version")
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("mysql client not found at '%s': %w", ds.config.Dump.MysqlPath, err)
	}
	return nil
}

// validateTempDirectory –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func (ds *DumpService) validateTempDirectory() error {
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(ds.config.Dump.TempDir, 0755); err != nil {
		return fmt.Errorf("failed to create temp directory: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
	testFile := filepath.Join(ds.config.Dump.TempDir, "test_write.tmp")
	f, err := os.Create(testFile)
	if err != nil {
		return fmt.Errorf("temp directory is not writable: %w", err)
	}
	f.Close()
	os.Remove(testFile)

	return nil
}

// GetDumpCommand –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É mysqldump (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ dry-run)
func (ds *DumpService) GetDumpCommand(databaseName string) []string {
	args := ds.config.Remote.GetMysqldumpArgs(databaseName)
	return append([]string{ds.config.Dump.MysqldumpPath}, args...)
}

// GetRestoreCommand –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É mysql –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ dry-run)
func (ds *DumpService) GetRestoreCommand(databaseName string) []string {
	args := ds.config.Local.GetMysqlArgs(databaseName)
	return append([]string{ds.config.Dump.MysqlPath}, args...)
}

// GetSafetyChecks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func (ds *DumpService) GetSafetyChecks(databaseName string) ([]string, error) {
	var checks []string

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è –ë–î
	systemDatabases := []string{"information_schema", "performance_schema", "mysql", "sys"}
	for _, sysDB := range systemDatabases {
		if databaseName == sysDB {
			checks = append(checks, fmt.Sprintf("‚ùå CRITICAL: '%s' is a system database", databaseName))
			return checks, fmt.Errorf("cannot sync system database")
		}
	}
	checks = append(checks, "‚úÖ Database name is safe")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	remoteConn, err := ds.dbService.TestConnection(true)
	if err != nil || !remoteConn.Connected {
		checks = append(checks, "‚ùå Remote server connection failed")
		return checks, fmt.Errorf("remote connection failed")
	}
	checks = append(checks, "‚úÖ Remote server connection OK")

	localConn, err := ds.dbService.TestConnection(false)
	if err != nil || !localConn.Connected {
		checks = append(checks, "‚ùå Local server connection failed")
		return checks, fmt.Errorf("local connection failed")
	}
	checks = append(checks, "‚úÖ Local server connection OK")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç–∏–ª–∏—Ç—ã
	if err := ds.validateMysqldumpAvailable(); err != nil {
		checks = append(checks, "‚ùå mysqldump not available")
		return checks, err
	}
	checks = append(checks, "‚úÖ mysqldump available")

	if err := ds.validateMysqlAvailable(); err != nil {
		checks = append(checks, "‚ùå mysql client not available")
		return checks, err
	}
	checks = append(checks, "‚úÖ mysql client available")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
	exists, err := ds.dbService.DatabaseExists(databaseName, true)
	if err != nil {
		checks = append(checks, "‚ùå Failed to check remote database")
		return checks, err
	}
	if !exists {
		checks = append(checks, fmt.Sprintf("‚ùå Database '%s' not found on remote", databaseName))
		return checks, fmt.Errorf("database not found")
	}
	checks = append(checks, fmt.Sprintf("‚úÖ Database '%s' exists on remote", databaseName))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
	localExists, err := ds.dbService.DatabaseExists(databaseName, false)
	if err != nil {
		checks = append(checks, "‚ùå Failed to check local database")
		return checks, err
	}
	if localExists {
		checks = append(checks, fmt.Sprintf("‚ö†Ô∏è  Local database '%s' will be REPLACED", databaseName))
	} else {
		checks = append(checks, fmt.Sprintf("‚úÖ Local database '%s' will be created", databaseName))
	}

	return checks, nil
}
