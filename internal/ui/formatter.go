package ui

import (
	"fmt"
	"strings"

	"db-sync-cli/internal/models"
)

// Formatter –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
type Formatter struct{}

// NewFormatter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
func NewFormatter() *Formatter {
	return &Formatter{}
}

// FormatDatabaseList —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
func (f *Formatter) FormatDatabaseList(databases models.DatabaseList, serverName string) string {
	if len(databases) == 0 {
		return InfoStyle.Render("No databases found")
	}

	var result strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	title := fmt.Sprintf("üìã Available databases on %s", serverName)
	result.WriteString(HighlightStyle.Render(title))
	result.WriteString("\n\n")

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
	headers := []string{"NAME", "SIZE", "TABLES"}
	rows := make([][]string, len(databases))

	for i, db := range databases {
		rows[i] = []string{
			db.Name,
			FormatSize(db.Size),
			fmt.Sprintf("%d", db.Tables),
		}
	}

	// –†–µ–Ω–¥–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—É
	result.WriteString(RenderTable(headers, rows))

	// –ò—Ç–æ–≥–æ
	totalSize := int64(0)
	totalTables := 0
	for _, db := range databases {
		totalSize += db.Size
		totalTables += db.Tables
	}

	result.WriteString("\n")
	summary := fmt.Sprintf("Total: %d databases, %s, %d tables",
		len(databases), FormatSize(totalSize), totalTables)
	result.WriteString(MutedStyle.Render(summary))

	return result.String()
}

// FormatConnectionStatus —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func (f *Formatter) FormatConnectionStatus(info *models.ConnectionInfo, label string) string {
	var result strings.Builder

	title := fmt.Sprintf("%s server (%s:%d):", label, info.Host, info.Port)
	result.WriteString(HighlightStyle.Render(title))
	result.WriteString("\n")

	if info.Connected {
		result.WriteString(FormatStatus("success", "Connected successfully"))
		result.WriteString("\n")

		if info.Version != "" {
			result.WriteString(fmt.Sprintf("  üìä MySQL version: %s", info.Version))
			result.WriteString("\n")
		}

		result.WriteString(fmt.Sprintf("  üë§ User: %s", info.User))
		result.WriteString("\n")
	} else {
		result.WriteString(FormatStatus("error", fmt.Sprintf("Connection failed: %s", info.Error)))
		result.WriteString("\n")
	}

	return result.String()
}

// FormatSyncPlan —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
func (f *Formatter) FormatSyncPlan(db *models.Database, willReplace bool, dryRun bool) string {
	var result strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	if dryRun {
		result.WriteString(WarningStyle.Render("üß™ DRY RUN MODE - No changes will be made"))
	} else {
		result.WriteString(InfoStyle.Render("üìã Sync Operation Plan"))
	}
	result.WriteString("\n\n")

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
	dbInfo := fmt.Sprintf("Database: %s\nSize: %s\nTables: %d",
		db.Name, FormatSize(db.Size), db.Tables)
	result.WriteString(RenderBox("Database Information", dbInfo))
	result.WriteString("\n")

	// –û–ø–µ—Ä–∞—Ü–∏—è
	var operation string
	if willReplace {
		operation = fmt.Sprintf("‚ö†Ô∏è  Local database '%s' will be REPLACED", db.Name)
		if dryRun {
			operation = fmt.Sprintf("DRY RUN: Would replace local database '%s' with %d tables (%s)",
				db.Name, db.Tables, FormatSize(db.Size))
		}
		result.WriteString(WarningStyle.Render(operation))
	} else {
		operation = fmt.Sprintf("‚úÖ Local database '%s' will be created", db.Name)
		if dryRun {
			operation = fmt.Sprintf("DRY RUN: Would create local database '%s' with %d tables (%s)",
				db.Name, db.Tables, FormatSize(db.Size))
		}
		result.WriteString(SuccessStyle.Render(operation))
	}
	result.WriteString("\n")

	return result.String()
}

// FormatSafetyChecks —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func (f *Formatter) FormatSafetyChecks(checks []SafetyCheck) string {
	var result strings.Builder

	result.WriteString(InfoStyle.Render("üîç Running safety checks..."))
	result.WriteString("\n")

	for _, check := range checks {
		if check.Passed {
			result.WriteString(FormatStatus("success", check.Message))
		} else {
			result.WriteString(FormatStatus("error", check.Message))
		}
		result.WriteString("\n")
	}

	// –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
	allPassed := true
	for _, check := range checks {
		if !check.Passed {
			allPassed = false
			break
		}
	}

	if allPassed {
		result.WriteString(FormatStatus("success", "All safety checks passed!"))
	} else {
		result.WriteString(FormatStatus("error", "Some safety checks failed!"))
	}
	result.WriteString("\n")

	return result.String()
}

// SafetyCheck –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
type SafetyCheck struct {
	Name    string
	Passed  bool
	Message string
}

// FormatCommands —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
func (f *Formatter) FormatCommands(dumpCmd, restoreCmd string, dryRun bool) string {
	var result strings.Builder

	if dryRun {
		result.WriteString(MutedStyle.Render("üìù Commands that would be executed:"))
	} else {
		result.WriteString(InfoStyle.Render("üìù Executing commands:"))
	}
	result.WriteString("\n")

	result.WriteString(fmt.Sprintf("   Dump: %s", dumpCmd))
	result.WriteString("\n")
	result.WriteString(fmt.Sprintf("   Restore: %s", restoreCmd))
	result.WriteString("\n")

	return result.String()
}

// FormatSyncResult —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
func (f *Formatter) FormatSyncResult(result *models.SyncResult) string {
	var output strings.Builder

	if result.Success {
		output.WriteString(FormatStatus("success",
			fmt.Sprintf("Successfully synchronized database '%s'", result.DatabaseName)))
	} else {
		output.WriteString(FormatStatus("error",
			fmt.Sprintf("Failed to synchronize database '%s': %s", result.DatabaseName, result.Error)))
	}
	output.WriteString("\n")

	if result.Success {
		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		stats := fmt.Sprintf("Duration: %s\nDump size: %s\nTables: %d",
			FormatDuration(result.Duration),
			FormatSize(result.DumpSize),
			result.TablesCount)
		output.WriteString("\n")
		output.WriteString(RenderBox("Sync Statistics", stats))
	}

	return output.String()
}

// FormatConfirmation —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
func (f *Formatter) FormatConfirmation(message string) string {
	var result strings.Builder

	result.WriteString(WarningStyle.Render("‚ö†Ô∏è  CONFIRMATION REQUIRED"))
	result.WriteString("\n\n")
	result.WriteString(message)
	result.WriteString("\n\n")
	result.WriteString(MutedStyle.Render("Type 'yes' to continue, or 'no' to cancel: "))

	return result.String()
}
